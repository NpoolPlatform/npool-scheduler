// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/npool-scheduler/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/npool-scheduler/pkg/db/ent/pubsubmessage"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePubsubMessage = "PubsubMessage"
)

// PubsubMessageMutation represents an operation that mutates the PubsubMessage nodes in the graph.
type PubsubMessageMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	message_id    *string
	state         *string
	resp_to_id    *uuid.UUID
	undo_id       *uuid.UUID
	arguments     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PubsubMessage, error)
	predicates    []predicate.PubsubMessage
}

var _ ent.Mutation = (*PubsubMessageMutation)(nil)

// pubsubmessageOption allows management of the mutation configuration using functional options.
type pubsubmessageOption func(*PubsubMessageMutation)

// newPubsubMessageMutation creates new mutation for the PubsubMessage entity.
func newPubsubMessageMutation(c config, op Op, opts ...pubsubmessageOption) *PubsubMessageMutation {
	m := &PubsubMessageMutation{
		config:        c,
		op:            op,
		typ:           TypePubsubMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPubsubMessageID sets the ID field of the mutation.
func withPubsubMessageID(id uuid.UUID) pubsubmessageOption {
	return func(m *PubsubMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *PubsubMessage
		)
		m.oldValue = func(ctx context.Context) (*PubsubMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PubsubMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPubsubMessage sets the old PubsubMessage of the mutation.
func withPubsubMessage(node *PubsubMessage) pubsubmessageOption {
	return func(m *PubsubMessageMutation) {
		m.oldValue = func(context.Context) (*PubsubMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PubsubMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PubsubMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PubsubMessage entities.
func (m *PubsubMessageMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PubsubMessageMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PubsubMessageMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PubsubMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PubsubMessageMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PubsubMessageMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PubsubMessage entity.
// If the PubsubMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PubsubMessageMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *PubsubMessageMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *PubsubMessageMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PubsubMessageMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PubsubMessageMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PubsubMessageMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PubsubMessage entity.
// If the PubsubMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PubsubMessageMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *PubsubMessageMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *PubsubMessageMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PubsubMessageMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PubsubMessageMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PubsubMessageMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the PubsubMessage entity.
// If the PubsubMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PubsubMessageMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *PubsubMessageMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *PubsubMessageMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PubsubMessageMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetMessageID sets the "message_id" field.
func (m *PubsubMessageMutation) SetMessageID(s string) {
	m.message_id = &s
}

// MessageID returns the value of the "message_id" field in the mutation.
func (m *PubsubMessageMutation) MessageID() (r string, exists bool) {
	v := m.message_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMessageID returns the old "message_id" field's value of the PubsubMessage entity.
// If the PubsubMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PubsubMessageMutation) OldMessageID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessageID: %w", err)
	}
	return oldValue.MessageID, nil
}

// ClearMessageID clears the value of the "message_id" field.
func (m *PubsubMessageMutation) ClearMessageID() {
	m.message_id = nil
	m.clearedFields[pubsubmessage.FieldMessageID] = struct{}{}
}

// MessageIDCleared returns if the "message_id" field was cleared in this mutation.
func (m *PubsubMessageMutation) MessageIDCleared() bool {
	_, ok := m.clearedFields[pubsubmessage.FieldMessageID]
	return ok
}

// ResetMessageID resets all changes to the "message_id" field.
func (m *PubsubMessageMutation) ResetMessageID() {
	m.message_id = nil
	delete(m.clearedFields, pubsubmessage.FieldMessageID)
}

// SetState sets the "state" field.
func (m *PubsubMessageMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *PubsubMessageMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the PubsubMessage entity.
// If the PubsubMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PubsubMessageMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ClearState clears the value of the "state" field.
func (m *PubsubMessageMutation) ClearState() {
	m.state = nil
	m.clearedFields[pubsubmessage.FieldState] = struct{}{}
}

// StateCleared returns if the "state" field was cleared in this mutation.
func (m *PubsubMessageMutation) StateCleared() bool {
	_, ok := m.clearedFields[pubsubmessage.FieldState]
	return ok
}

// ResetState resets all changes to the "state" field.
func (m *PubsubMessageMutation) ResetState() {
	m.state = nil
	delete(m.clearedFields, pubsubmessage.FieldState)
}

// SetRespToID sets the "resp_to_id" field.
func (m *PubsubMessageMutation) SetRespToID(u uuid.UUID) {
	m.resp_to_id = &u
}

// RespToID returns the value of the "resp_to_id" field in the mutation.
func (m *PubsubMessageMutation) RespToID() (r uuid.UUID, exists bool) {
	v := m.resp_to_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRespToID returns the old "resp_to_id" field's value of the PubsubMessage entity.
// If the PubsubMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PubsubMessageMutation) OldRespToID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRespToID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRespToID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRespToID: %w", err)
	}
	return oldValue.RespToID, nil
}

// ClearRespToID clears the value of the "resp_to_id" field.
func (m *PubsubMessageMutation) ClearRespToID() {
	m.resp_to_id = nil
	m.clearedFields[pubsubmessage.FieldRespToID] = struct{}{}
}

// RespToIDCleared returns if the "resp_to_id" field was cleared in this mutation.
func (m *PubsubMessageMutation) RespToIDCleared() bool {
	_, ok := m.clearedFields[pubsubmessage.FieldRespToID]
	return ok
}

// ResetRespToID resets all changes to the "resp_to_id" field.
func (m *PubsubMessageMutation) ResetRespToID() {
	m.resp_to_id = nil
	delete(m.clearedFields, pubsubmessage.FieldRespToID)
}

// SetUndoID sets the "undo_id" field.
func (m *PubsubMessageMutation) SetUndoID(u uuid.UUID) {
	m.undo_id = &u
}

// UndoID returns the value of the "undo_id" field in the mutation.
func (m *PubsubMessageMutation) UndoID() (r uuid.UUID, exists bool) {
	v := m.undo_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUndoID returns the old "undo_id" field's value of the PubsubMessage entity.
// If the PubsubMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PubsubMessageMutation) OldUndoID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUndoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUndoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUndoID: %w", err)
	}
	return oldValue.UndoID, nil
}

// ClearUndoID clears the value of the "undo_id" field.
func (m *PubsubMessageMutation) ClearUndoID() {
	m.undo_id = nil
	m.clearedFields[pubsubmessage.FieldUndoID] = struct{}{}
}

// UndoIDCleared returns if the "undo_id" field was cleared in this mutation.
func (m *PubsubMessageMutation) UndoIDCleared() bool {
	_, ok := m.clearedFields[pubsubmessage.FieldUndoID]
	return ok
}

// ResetUndoID resets all changes to the "undo_id" field.
func (m *PubsubMessageMutation) ResetUndoID() {
	m.undo_id = nil
	delete(m.clearedFields, pubsubmessage.FieldUndoID)
}

// SetArguments sets the "arguments" field.
func (m *PubsubMessageMutation) SetArguments(s string) {
	m.arguments = &s
}

// Arguments returns the value of the "arguments" field in the mutation.
func (m *PubsubMessageMutation) Arguments() (r string, exists bool) {
	v := m.arguments
	if v == nil {
		return
	}
	return *v, true
}

// OldArguments returns the old "arguments" field's value of the PubsubMessage entity.
// If the PubsubMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PubsubMessageMutation) OldArguments(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArguments is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArguments requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArguments: %w", err)
	}
	return oldValue.Arguments, nil
}

// ClearArguments clears the value of the "arguments" field.
func (m *PubsubMessageMutation) ClearArguments() {
	m.arguments = nil
	m.clearedFields[pubsubmessage.FieldArguments] = struct{}{}
}

// ArgumentsCleared returns if the "arguments" field was cleared in this mutation.
func (m *PubsubMessageMutation) ArgumentsCleared() bool {
	_, ok := m.clearedFields[pubsubmessage.FieldArguments]
	return ok
}

// ResetArguments resets all changes to the "arguments" field.
func (m *PubsubMessageMutation) ResetArguments() {
	m.arguments = nil
	delete(m.clearedFields, pubsubmessage.FieldArguments)
}

// Where appends a list predicates to the PubsubMessageMutation builder.
func (m *PubsubMessageMutation) Where(ps ...predicate.PubsubMessage) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PubsubMessageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PubsubMessage).
func (m *PubsubMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PubsubMessageMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, pubsubmessage.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, pubsubmessage.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, pubsubmessage.FieldDeletedAt)
	}
	if m.message_id != nil {
		fields = append(fields, pubsubmessage.FieldMessageID)
	}
	if m.state != nil {
		fields = append(fields, pubsubmessage.FieldState)
	}
	if m.resp_to_id != nil {
		fields = append(fields, pubsubmessage.FieldRespToID)
	}
	if m.undo_id != nil {
		fields = append(fields, pubsubmessage.FieldUndoID)
	}
	if m.arguments != nil {
		fields = append(fields, pubsubmessage.FieldArguments)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PubsubMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pubsubmessage.FieldCreatedAt:
		return m.CreatedAt()
	case pubsubmessage.FieldUpdatedAt:
		return m.UpdatedAt()
	case pubsubmessage.FieldDeletedAt:
		return m.DeletedAt()
	case pubsubmessage.FieldMessageID:
		return m.MessageID()
	case pubsubmessage.FieldState:
		return m.State()
	case pubsubmessage.FieldRespToID:
		return m.RespToID()
	case pubsubmessage.FieldUndoID:
		return m.UndoID()
	case pubsubmessage.FieldArguments:
		return m.Arguments()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PubsubMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pubsubmessage.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case pubsubmessage.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case pubsubmessage.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case pubsubmessage.FieldMessageID:
		return m.OldMessageID(ctx)
	case pubsubmessage.FieldState:
		return m.OldState(ctx)
	case pubsubmessage.FieldRespToID:
		return m.OldRespToID(ctx)
	case pubsubmessage.FieldUndoID:
		return m.OldUndoID(ctx)
	case pubsubmessage.FieldArguments:
		return m.OldArguments(ctx)
	}
	return nil, fmt.Errorf("unknown PubsubMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PubsubMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pubsubmessage.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case pubsubmessage.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case pubsubmessage.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case pubsubmessage.FieldMessageID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessageID(v)
		return nil
	case pubsubmessage.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case pubsubmessage.FieldRespToID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRespToID(v)
		return nil
	case pubsubmessage.FieldUndoID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUndoID(v)
		return nil
	case pubsubmessage.FieldArguments:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArguments(v)
		return nil
	}
	return fmt.Errorf("unknown PubsubMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PubsubMessageMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, pubsubmessage.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, pubsubmessage.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, pubsubmessage.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PubsubMessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pubsubmessage.FieldCreatedAt:
		return m.AddedCreatedAt()
	case pubsubmessage.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case pubsubmessage.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PubsubMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pubsubmessage.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case pubsubmessage.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case pubsubmessage.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PubsubMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PubsubMessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(pubsubmessage.FieldMessageID) {
		fields = append(fields, pubsubmessage.FieldMessageID)
	}
	if m.FieldCleared(pubsubmessage.FieldState) {
		fields = append(fields, pubsubmessage.FieldState)
	}
	if m.FieldCleared(pubsubmessage.FieldRespToID) {
		fields = append(fields, pubsubmessage.FieldRespToID)
	}
	if m.FieldCleared(pubsubmessage.FieldUndoID) {
		fields = append(fields, pubsubmessage.FieldUndoID)
	}
	if m.FieldCleared(pubsubmessage.FieldArguments) {
		fields = append(fields, pubsubmessage.FieldArguments)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PubsubMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PubsubMessageMutation) ClearField(name string) error {
	switch name {
	case pubsubmessage.FieldMessageID:
		m.ClearMessageID()
		return nil
	case pubsubmessage.FieldState:
		m.ClearState()
		return nil
	case pubsubmessage.FieldRespToID:
		m.ClearRespToID()
		return nil
	case pubsubmessage.FieldUndoID:
		m.ClearUndoID()
		return nil
	case pubsubmessage.FieldArguments:
		m.ClearArguments()
		return nil
	}
	return fmt.Errorf("unknown PubsubMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PubsubMessageMutation) ResetField(name string) error {
	switch name {
	case pubsubmessage.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case pubsubmessage.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case pubsubmessage.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case pubsubmessage.FieldMessageID:
		m.ResetMessageID()
		return nil
	case pubsubmessage.FieldState:
		m.ResetState()
		return nil
	case pubsubmessage.FieldRespToID:
		m.ResetRespToID()
		return nil
	case pubsubmessage.FieldUndoID:
		m.ResetUndoID()
		return nil
	case pubsubmessage.FieldArguments:
		m.ResetArguments()
		return nil
	}
	return fmt.Errorf("unknown PubsubMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PubsubMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PubsubMessageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PubsubMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PubsubMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PubsubMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PubsubMessageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PubsubMessageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PubsubMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PubsubMessageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PubsubMessage edge %s", name)
}
